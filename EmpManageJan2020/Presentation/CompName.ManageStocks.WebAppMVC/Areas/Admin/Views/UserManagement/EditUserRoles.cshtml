@model (CompName.ManageStocks.WebAppMVC.Areas.Admin.Models.UserManagement.UserAccountViewModel userAccountVM, List<CompName.ManageStocks.WebAppMVC.Areas.Authentication.Models.Auth.UserRoleViewModel> userRoles)

@{
    ViewData["Title"] = @Model.userAccountVM.UserName + " - User Details";

    Layout = "~/Views/Shared/_Layout.cshtml";

}
<div class="card">
    <div class="card-header">
        <h3>
            <strong>User Name :</strong>  @Model.userAccountVM.UserName
            <strong class="pl-4"> User Id :</strong>  @Model.userAccountVM.UserId
        </h3>
    </div>

    <div class="row" style="">
        <div class="col-sm-12">

            <div class="bs-component">
                @await Html.PartialAsync("_ManageUserTabs", (@Model.userAccountVM.UserId, "tab-EditUserRoles"))
                <div id="myTabContent" class="tab-content">
                    <div class="tab-pane fade show" id="EditUserDetails">
                    </div>
                    <div class="tab-pane fade show active" id="EditUserRoles">
                        <div class="card">
                            <div class="card-body">
                                @Html.AntiForgeryToken()
                                <table id="tblEditUserRoles" class="table table-striped table-bordered table-hover" style="width:100%">
                                    <thead class="lead blockquote ">
                                        <tr class="">
                                            <th>Active Status</th>
                                            <th>Role Name</th>
                                            <th>Created On</th>
                                            <th>Created By</th>
                                            <th>Created By UserName</th>
                                            <th>Modified On</th>
                                            <th>Modified By</th>
                                            <th>Modified By UserName</th>
                                        </tr>
                                    </thead>
                                    <tbody class="blockquote ">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="card-footer text-center">
                            <button type="submit" class="btn btn-primary" id="btnEditUserRoles">
                                <i class="fas fa-save"></i> Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/jsControllers/Admin/UserManagementController.js"></script>

<script>
    var userManagementController = new UserManagementController();

    var editUserRolesURL = '@Url.Action("EditUserRoles", "UserManagement", new { Area = "Admin" })';

    $(window).on("load", function () {

        var userRoles =  @Html.Raw(Json.Serialize(@Model.userRoles));

         $('#tblEditUserRoles').DataTable({
             "bPaginate": false,
            "bLengthChange": false,
             "bFilter": false,
            "bInfo": false,
            "order": [],
            data :userRoles,
             "columns": [

                 {
                       "data": "IsActive",
                        "render": function (data, type, row, meta)
                            {
                                if (data == true) {

                                   // return '<div class="text-center"><input type="checkbox" checked  id="chk_'+ row.RoleName  +'" class="editor-active"></div>';

                                    return '<div class="custom-control custom-switch text-center">'
                                                +'<input type = "checkbox" checked class="custom-control-input" id="chk_'+ row.RoleName  +'">'
                                                       + '<label class="custom-control-label" for="chk_'+ row.RoleName  +'"></label></div>'
                                }
                                else {
                                    return '<div class="custom-control custom-switch text-center">'
                                                +'<input type = "checkbox" class="custom-control-input" id="chk_'+ row.RoleName  +'">'
                                                       + '<label class="custom-control-label" for="chk_'+ row.RoleName  +'"></label></div>'

                                }
                            }
                            },

                       { "data": "RoleName", "autowidth": true },
                        {
                           "data": "CreatedOn",
                           "type": "date ",
                            "render": function (data) {

                                if (data == null) {
                                    return '';
                                }

                               return moment(data).format('lll');
                            }
                        },
                       { "data": "CreatedBy", "autowidth": true },
                       { "data": "CreatedByUserName", "autowidth": true },
                        {
                           "data": "ModifiedOn",
                           "type": "date ",
                            "render": function (data) {
                                if (data == null) {
                                    return '';
                                }
                               return moment(data).format('lll');
                            }
                        },
                       { "data": "ModifiedBy", "autowidth": true },
                       { "data": "ModifiedByUserName", "autowidth": true },
           ]
         });

        $('#btnEditUserRoles').click(function () {
            var tblEditUserRoles = $('#tblEditUserRoles').DataTable();

            var tblEditUserRolesArray = tblEditUserRoles.data().toArray();

            var editUserRolesToPost = [];

            jQuery.each(tblEditUserRolesArray, function (index, item) {
                var editUserRoleToPost = {};

                editUserRoleToPost.RoleName = item.RoleName;
                editUserRoleToPost.UserRoleId = item.UserRoleId;
                editUserRoleToPost.RoleId = item.RoleId;
                editUserRoleToPost.UserId = item.UserId;

                if ($("#chk_" + item.RoleName).prop('checked')) {

                    editUserRoleToPost.IsActive = true;
                    }
                else {
                    editUserRoleToPost.IsActive = false;
                }

                editUserRolesToPost.push(editUserRoleToPost);

            });

            $.ajax({
                type: "POST",
                url: editUserRolesURL,
                data: { userRolesViewModel: editUserRolesToPost },
                datatype: "json",
                headers: {
                    "RequestVerificationToken": $('input[name = __RequestVerificationToken]').val()
                },
                begin: function () {
                },
                complete: function () {
                    sharedController.hideLoadingIndicator();
                },
                success: function (data) {
                    if (data.Status == "Success") {
                        swalWithBootstrapButtons.fire({
                            icon: 'success',
                            text: data.Message,
                            timer: 2500,
                            timerProgressBar: true,
                            showCancelButton: false,
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            onBeforeOpen: () => {
                            },
                            onClose: () => {
                            }
                        }).then((result) => {
                            if (result.dismiss === Swal.DismissReason.timer) {
                                 location.reload();
                            }
                        })
                    }
                },
                error: function (xMLHttpRequest, textStatus, errorThrown) {
                    sharedController.hideLoadingIndicator();
                    sharedController.showAjaxErrorMessagePopUp(xMLHttpRequest, textStatus, errorThrown);
                }
                 });

            });

        sharedController.navActiveColorChange("nav-item-Admin");
        sharedController.hideLoadingIndicator();

    });
</script>